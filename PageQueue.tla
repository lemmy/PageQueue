(***************************************************************************)
Random Thoughts:
----------------

- The lower bound of a page is a single state.  The upper bound is chosen s.t. 
  work is evenly distributed across workers.  This is probably going to be a function
  whose input is the average outdegree of the state graph.

- A page is of variable size both in terms of the number of states it contains
  as well as its byte-size on disk.  The former is determined by the number of states
  generated by a worker as part of the evaluation of the next-state relation.  The
  latter is determined by the size of the state's variables and the efficiency of
  object serialzation (ie compression).

- Determining the queue's global size is difficult: Maintaining an exact counter of
  unseen states would require synchronization of the counter and the queue.  An 
  approximation of the queue's size is however easily accomplished with an AtomicLong.

- Using two AtomicLongs, to represent the head and tail pages of the queue, has a fixed
  memory/space requirement whereas the space requirement of a queue of page handles
  (filenames) is linear in the number of (unseen) pages.  Most off-the-shelf queue
  implementations have significant overhead too bc they e.g. wrap each element in a
  linkedlist node.

- Let the first generation of pages be those when head - tail = 1.  In other words pages
  are produced and consumed at a similar rate.  This is the case at the beginning of model
  checking.  It would be desirable to create the first generation of pages in memory to
  not cause disk IO.  This property would mean that the page queue is usable even when
  model checking small state spaces.

- Worker suspension/resume can probably be implemented by a RW lock where workers acquire
  and hold the read lock and the thread requesting suspension acquires the write lock.
  On the other hand, adding a separate synchronization primitive (locks) into the game
  might make the algorithm more complicated: suspension can likely be handled by signaling
  it via the tail AtomicLong (it is already used for other signals such as termination...).  

---

The algorithm relies on two synchronization primitives:

a) Atomic counters (two) implemented with Java's AtomicLong
b) Atomic file rename operation implemented with Java's java.nio.Files#move
   (java.nio.file.StandardCopyOption.ATOMIC_MOVE)

---

Fixed-size vs. upper size vs. dynamic page sizes

An always full, fixed-size page is impossible because the actual number of successor
states is not guaranteed to align with the page size.  Determining the page size
dynamically---based on the number of successor states---has the disadvantage that we
end up with tiny pages when we optimize for huge pages if states have few successors.
Thus, we allocate fixed-size pages, which we try to fill up if possible.  This means
that we potentially enqueue a page after we have dequeued many (all) other pages.   

---

This algorithm works---all pages get explored and threads terminate afterwards---because
the ratio between dequeues and enqueues is an invariant.  Each dequeue operation is
always followed by an enqueue operation.  When head >= tail, we know that not all work
is done. When tail > head /\ tail < head + Cardinality(Workers), a subset of the
workers are waiting for new pages.  FINISH iff tail = head + Cardinality(Workers).

Disk to be empty is a necessary but not a sufficient condition for termination (the
last page might have been dequeued and the new page---with the successor states---has
not yet been enqueued).

Fixed-sized pages:
+ Ease memory-allocation (less fragmentation)
+ Reuse allocate pages (a deqeued page can become the next enqueue page (with the
  old states replaced)
+ Page compaction (ie. "symbolification") probably more effective with fixed-size,
  large pages

    This commit marks the end of the design with a dynamic page
    size (the size of a page is determined by the number of
    successor states generated).  The next design will model
    fixed-size pages that TLC will try to fill up if possible.
    From the perspective of the lock-free protocol, this means
    that it changes from an alternation between dequeue and enqueue
    operation to one where multiple dequeue operations are
    followed by a single enqueue operation.

Fixed-size pages only covers half of the story. It is really about filling up pages
as an optimization by reducing the overall number of pages.  Fewer pages means fewer
IO overhead of creating, deleting, ... files.  In order to fill up pages, we have to
switch from pairs of enq and deq operations to a 1:n ratio where n \in 0..  

Todo:
-----

Worker suspension as prototyped in
https://github.com/lemmy/PageQueue/commit/f2b4b3ba1cf77aa5683873de28873d53ad231be1

This can likely be done with a high-level synchronization primitive such as a
barrier implemented by a (Java) phaser.  A first version has been speced with
the main process but abandoned for now.
 
(***************************************************************************)


----------------------------- MODULE PageQueue -----------------------------
EXTENDS Integers, Sequences, SequencesExt, Functions, FiniteSets, TLC, Naturals

\* The largest element in the given sequence assuming the elements have an
\* order. 
Max(seq) == CHOOSE s \in Range(seq) : \A e \in Range(seq) : s >= e

\* seq is assumed to be a sequence of functions. Equals a sequence where
\* each element is the i-th element of the nested functions.
Reduce(seq, i) == [ idx \in 1..Len(seq) |-> seq[idx][i] ]

CONSTANT Pages, Workers

ASSUME /\ Workers # {}                (* at least one worker *)
       /\ Pages \in Nat               (* maximum number of pages to write *)

\* TODO: Separation into Finish and Violation not needed by the implementation.
\* The implementation just returns null. Instead, only the spec uses it to
\* be able to state stronger invariants. 
fin == CHOOSE fin : fin \notin Nat
vio == CHOOSE vio : vio \notin Nat \cup {fin}

-----------------------------------------------------------------------------
(***************************************************************************)
(*  PageQueue models a non-strict/relaxed FIFO/queue specially tailored to *)
(*  the TLC  model checker.  TLC generates large volumes of unexplored     *)
(*  states during breadth-first search of the (on-the-fly generated) state *)
(*  graph.  In order to parallelize the BFS search and ultimately scale    *)
(*  it, we accept to deviate from strict fifo order.                       *)
(*                                                                         *)
(*  The underlying assumption/justification/argument is as follows:        *)
(*  1) TLC employs BFS instead of DFS to check safety properties because:  *)
(*  1a) BFS is parallelizable and thus scales better with the number of    *)
(*      cores.                                                             *)  
(*  1b) Users of TLC are interested in finding the shortest                *) 
(*      counter-example if any,  because a counter-example with a hundred  *)
(*      states is more difficult to understand than one with 10 states.    *)
(*  2) An approximation of the shortest counter-example is acceptable      *)
(*     provided its upper bound (the approximation cannot be shorter than  *)
(*     the actual counter-example) is within  1-2 states. WE WILL EXPLORE  *)
(*     IF THIS IS SOMETHING THAT CAN BE GUARANTEED WITH CERTAINTY OR JUST  *)
(*     HIGH PROBABILITY.                                                   *)
(*  3) The average state graph is such that it has a low diameter and      *)
(*     states have a high outdegree.  In other words, it  has many states  *)
(*     with identical distance d from the initial states (root nodes of    *)
(*     the graph).                                                         *)
(*  4) A page is thus a sequence of states which - with high probability - *)
(*     have all the same d.                                                *)
(*  5) Assuming we choose (limit) the size of a page s.t. processes will   *)
(*     dequeue pages with distance [d-2,d+2].                              *)
(*                                                                         *)
(*     The fundamental idea of PageQueue is to improve scalability by      *)
(*     minimizing the critical section to incrementing counters whereas    *)
(*     the existing implementation of TLC runs IO (read/write states)      *)
(*     inside the CS.                                                      *)
(***************************************************************************)

\* {<<1>>, <<1,2>>, <<1,2,3>>, ...}
Disks == { [ n \in s |-> n ]  : s \in { (1..n) : n \in (1..Pages) } }

\* A record representing a logical queue operation.
Op(t, o, p) == [ thread |-> t, oper |-> o, page |-> p ]


-----------------------------------------------------------------------------

(***************************************************************************
--algorithm PageQueue {
       variables \* A strictly monotonic increasing counter. Its value marks the
                 \* last page that has been consumed.  Iff its value is negativ,
                 \* it serves as a signal for consumers/workers (compare fin and vio).
                 tail = 0; \* No page has been dequeued yet.
                 \* The pages that have been swapped to disk.
                 disk \in Disks; \* The initial page is initially on-disk.
                 \* A strictly monotonic increasing counter. Its value marks the
                 \* last page that has been consumed.
                 head = Max(disk); \* A single page with the initial states has been enqueued.
                 \* Auxiliary/History variable to check properties.
                 history = [ i \in 1..Len(disk) |-> Op("init", "enq", i) ];
       
       define {
       
           Enqueued == Reduce(SelectSeq(history, LAMBDA e : e["oper"]="enq"), "page")
           Dequeued == Reduce(SelectSeq(history, LAMBDA e : e["oper"]="deq"), "page")
       
           \* Not a state constraint but instead explicitly in the page.
           TotalWork == Len(Enqueued) > Pages \/ Len(Dequeued) > Pages
       
           \* Safety Property:
           \* There are never duplicates in history nor disk.
           \* Upon terminate all work is either done or a violation has been found.
           WSafety == 
                   /\ IsInjective(Enqueued)
                   /\ IsInjective(Dequeued)
                   /\ IsInjective(disk)
                   /\ (\A p \in Workers : pc[p] = "Done") => 
                       \/ tail = vio
                       \/ /\ tail = fin
                          /\ disk = <<>>
                          \* Any enq'ed page has also been deq'ed.
                          /\ Range(Enqueued) = Range(Dequeued)
                          \* Due to the way how we made the state space of the spec
                          \* finite, admissible behaviors can create more pages. I'm too
                          \* lazy to find the actual bound.
                          /\ 1..Pages \subseteq Range(Reduce(history, "page"))
       }
       
       (* Atomicity is implicit due to the absence of labels. *)      
       macro CAS(result, var, expected, new) {
           if (var = expected) {
               var := new;
               result := TRUE
           } else { 
               result := FALSE
           }
       }
\*       
\*       fair process (ProcName = "main") 
\*            variables tmp = -1; {
\*            
\*            m0:  while (TRUE) {
\*                         (* CAS tail to SUSPEND and remember old value *)
\*                     m1: tmp := tail;
\*                         tail := SUSPEND;
\*                         \* Setting tail to SUSPEND is to simple because it
\*                         \* does not take into account that tail could already
\*                         \* be set to fin in which case we must not suspend.
\*                         (* Setting tail to SUSPEND might override fin/vio  *)
\*                         (* set by a worker.  Thus, check for override and set tail  *)
\*                         (* from SUSPEND back to tmp. Afterwards, also terminate the *)
\*                         (* the phaser to release any worker we might have caused to *)
\*                         (* suspend instead of finish.                               *)
\*                     m2: if (tmp = vio \/ tmp = fin) {
\*                             tail := tmp;
\*                             goto Done;
\*                         };
\*                     m3: await AAAA;
\*                         (* Do main thread things and set tail back to t. *)
\*                     m4: skip;
\*                         tail := tmp;
\*                         (* Resume workers. *)
\*                         (* Phaser#arriveAndAwaitAdvance *)
\*                     m5: await AAAB;
\*            };
\*       }

       \* It is acceptable to deviate from strict FIFO (no strict BFS).
       \* Should it be possible to define a bound for the deviation?
       \* At the implementation level, an enqueue operation is not
       \* atomic but consists of atomically (AtomicLong) incrementing
       \* the enqueue counter head and (re-) naming the disk file.  This
       \* can result in interleavings where a disk file for head is
       \* not yet written but a disk file for head + n already is.  A
       \* dequeue opeartion with head thus cannot make progress while
       \* the dequeue for head + n progresses.
       
       (* A worker process has the following high-level stages: *)
       (* - deq to rd:  Dequeue a page iff one is available. *)
       (* - exp:        Evaluate the next-state relation. *)
       (* - enq to wrt: Enqueue a newly generate page. *)
       (* In all of the stages, it is possible for a worker to terminate *)
       (* on a violation of an invariant or be terminated by receiving a *)
       (* signal from another worker. *)
       fair process (worker \in Workers) 
            variables result = FALSE, t = 0, h = -1; {
            
            (* 1. Stage *)
            
            \* Read head and tail to check if work left.
            \* Iff true CAS tail+1, else done. On successful
            \* CAS return tail, else reread head and tail.
            deq: t := tail;
                 if (t = vio) {
                   goto Done;
                 } else if (t = fin) {
                   assert disk = <<>>;
                   goto Done;
\*                 } else if (t = SUSPEND) {
\*                     awtwtA: await AAAA;
\*                     awtwtB: await AAAB;
\*                     goto deq;
                 } else {
                   \* deq/claim a page (and subsequently at wt read it).
                   casA: CAS(result, tail, t, t + 1);
                         if (result) {
                            (* Set t to value CASed. *)
                            t := t + 1;
                            goto wt;
                         } else {
                           (* CAS can fail for two reasons:
                              a) Another worker dequeued the
                                 page (normal case).
                              b) Model checking finished
                              In both cases return to deq. *)
                            goto deq;
                         };
                 };

            (* spin until a page is available and can be read or
               all other Workers are "stuck" here too (which
               incidates fin). *)
            wt: while (t \notin Range(disk)) {
            wt1:   if (tail = vio) {
                       \* Another worker signaled termination.
                       goto Done;
                    } else if (tail = fin) {
                       assert disk = <<>>;
                       goto Done;
                    } else if (tail = Cardinality(Workers) + head) {
                       \* This worker detected the termination condition.
                       casB: CAS(result, tail, t, fin);
                             if (result) {
                                \* Successfully signaled termination.
                                assert disk = <<>>;
                                goto Done;
                             } else {
                                \* Failed to signal termination.
                                goto wt;
                             }
                    } else if (head <= Cardinality(Workers) + tail /\ h # -1) {
                        \* write to disk.
                        disk := disk \o << h >>;
                        history := history \o << Op(self, "enq", h) >>;
                        h := -1;
                        goto wt;
                    } else {
                        \* Page not yet readable (the writer hasn't fined yet). 
                        skip; \* goto wt;
                    }
                 };
            rd:  assert t \in Range(disk);
                 disk := Remove(disk, t);
                 history := history \o << Op(self, "deq", t) >>;
                 
            (* 2. Stage *)

            \* Evaluate next-state relation.
            exp: if (TotalWork) {
                          \* Bound spec to a finite state space. 
                          \* Using a state constraint such as 
                          \* Len(history) < Pages is more elegant
                          \* but causes trouble when checking
                          \* liveness because the property is
                          \* vacuously true (see Specifying Systems
                          \* section 13.4.5).  
                          goto deq;
                 } else {
                          goto enq;
                 };
            
           (* 3. Stage *)
            
           (* enqueue a page. *)
           \* enq ideally increments head and (re-)names the 
           \* disk file atomically. Otherwise a dequeue operation
           \* might fail to read/find the file if it claims the
           \* page (inc tail) before the page is written.
           \*
           \* However, It seems impossible to increment high and
           \* rename the disk file atomically if high is represented
           \* by an AtomicLong.  This suggests that enqueue has
           \* to be implemented in a synchronized block/method.
           \* On the other hand, why rename the file at all? Can't
           \* we get away with using an AtomicLong after all if we
           \* keep the mapping from high to the file name in memory?
           \* Idea: Just use an in-memory queue of filenames
           \* (just use Java's BlockingQueue)?
           \* - ArrayBlockingQueue: We want unbound queue
           \* - ConcurrentLinkedQueue: Does not block
           \* - SynchronousQueue: Appears to logically be SPSC
           \* - LinkedBlockingQueue: Memory overhead of creating 
           \*                        linked list nodes.
           \* - PriorityBlockingQueue: Do not need priority (ordering)
           \*                          internally uses Object[]
           \* Alternatively, a dequeue operation could (busy) wait
           \* for the page to become available/visible after it
           \* reads tail successfully.  In other words, dequeue
           \* waits for the corresponding enqueue operation to finish,
           \* which will only ever happen when head and tail are
           \* close. E.g. during the beginning and end of model
           \* checking (to some extend this is what getCache in the
           \* existing implementation is used for).
           
           (*
                              h = -1              |  h # -1
                            ----------------------|---------------
            violation:       CAS(fin),goto Done   | CAS(fin), goto Done
            no succ:         (claim,) goto deq    | goto deq
            fits into page:  claim, goto deq      | goto deq
            exactly fits p:  claim, wrt, goto deq | wrt, godo deq
            exceeds page:    claim, wrt, goto enq | wrt, goto enq
            
            ("goto enq" means we have to end up claiming a new page!!!)
           *)
                 (* a1) h unchanged, goto deq: Added to an existing page (goto deq above) *)
                 (* a2) h unchanged, goto wrt: Filled an existing page *)
                 (* b1) CAS of h, goto deq: Created and added to the page *)
                 (* b2) CAS of h, goto wrt: Created and filled the page *)
            enq: if (h = -1) {
                      either { goto violation; } or { goto claim; };
                 } else if (h # -1) {
                      either { goto violation; } or { goto wrt; } or { goto deq; };
                 }; 

            claim: assert h = -1;
                   clm1:  h := head;
                   clm2:  CAS(result, head, h, h + 1);
                          if (result) {
                             h := h + 1;
                             either { goto deq; } 
                                 or { goto wrt; };
                          } else {
                              goto clm1;
                          };
            
            (* write page to disk. Intuitively, one would write the
               the page first (wrt) before enqueueing it (enq). However,
               enq determines the file-name of the page.  *)
            wrt: disk := disk \o << h >>;
                 history := history \o << Op(self, "enq", h) >>;
                 h := -1;
                 either { goto deq; } or { goto exp; };
                     
            \*-------------------------------------------------
            
            \* TODO The implementation will first have already claimed a page.
            violation: CAS(result, tail, t, vio);
                       if (result) {
                             goto Done;
                       } else {
                             retry: t := tail;
                             goto violation;
                       };           
       }
}
***************************************************************************)
\* BEGIN TRANSLATION PCal-d65c57e381dc608f11d2725c56bda426
VARIABLES tail, disk, head, history, pc

(* define statement *)
Enqueued == Reduce(SelectSeq(history, LAMBDA e : e["oper"]="enq"), "page")
Dequeued == Reduce(SelectSeq(history, LAMBDA e : e["oper"]="deq"), "page")


TotalWork == Len(Enqueued) > Pages \/ Len(Dequeued) > Pages




WSafety ==
        /\ IsInjective(Enqueued)
        /\ IsInjective(Dequeued)
        /\ IsInjective(disk)
        /\ (\A p \in Workers : pc[p] = "Done") => \/ tail = vio
                                                  \/ /\ tail = fin
                                                     /\ disk = <<>>

                                                     /\ Range(Enqueued) = Range(Dequeued)



                                                     /\ 1..Pages \subseteq Range(Reduce(history, "page"))

VARIABLES result, t, h

vars == << tail, disk, head, history, pc, result, t, h >>

ProcSet == (Workers)

Init == (* Global variables *)
        /\ tail = 0
        /\ disk \in Disks
        /\ head = Max(disk)
        /\ history = [ i \in 1..Len(disk) |-> Op("init", "enq", i) ]
        (* Process worker *)
        /\ result = [self \in Workers |-> FALSE]
        /\ t = [self \in Workers |-> 0]
        /\ h = [self \in Workers |-> -1]
        /\ pc = [self \in ProcSet |-> "deq"]

deq(self) == /\ pc[self] = "deq"
             /\ t' = [t EXCEPT ![self] = tail]
             /\ IF t'[self] = vio
                   THEN /\ pc' = [pc EXCEPT ![self] = "Done"]
                   ELSE /\ IF t'[self] = fin
                              THEN /\ Assert(disk = <<>>, 
                                             "Failure of assertion at line 276, column 20.")
                                   /\ pc' = [pc EXCEPT ![self] = "Done"]
                              ELSE /\ pc' = [pc EXCEPT ![self] = "casA"]
             /\ UNCHANGED << tail, disk, head, history, result, h >>

casA(self) == /\ pc[self] = "casA"
              /\ IF tail = t[self]
                    THEN /\ tail' = t[self] + 1
                         /\ result' = [result EXCEPT ![self] = TRUE]
                    ELSE /\ result' = [result EXCEPT ![self] = FALSE]
                         /\ tail' = tail
              /\ IF result'[self]
                    THEN /\ t' = [t EXCEPT ![self] = t[self] + 1]
                         /\ pc' = [pc EXCEPT ![self] = "wt"]
                    ELSE /\ pc' = [pc EXCEPT ![self] = "deq"]
                         /\ t' = t
              /\ UNCHANGED << disk, head, history, h >>

wt(self) == /\ pc[self] = "wt"
            /\ IF t[self] \notin Range(disk)
                  THEN /\ pc' = [pc EXCEPT ![self] = "wt1"]
                  ELSE /\ pc' = [pc EXCEPT ![self] = "rd"]
            /\ UNCHANGED << tail, disk, head, history, result, t, h >>

wt1(self) == /\ pc[self] = "wt1"
             /\ IF tail = vio
                   THEN /\ pc' = [pc EXCEPT ![self] = "Done"]
                        /\ UNCHANGED << disk, history, h >>
                   ELSE /\ IF tail = fin
                              THEN /\ Assert(disk = <<>>, 
                                             "Failure of assertion at line 307, column 24.")
                                   /\ pc' = [pc EXCEPT ![self] = "Done"]
                                   /\ UNCHANGED << disk, history, h >>
                              ELSE /\ IF tail = Cardinality(Workers) + head
                                         THEN /\ pc' = [pc EXCEPT ![self] = "casB"]
                                              /\ UNCHANGED << disk, history, h >>
                                         ELSE /\ IF head <= Cardinality(Workers) + tail /\ h[self] # -1
                                                    THEN /\ disk' = disk \o << h[self] >>
                                                         /\ history' = history \o << Op(self, "enq", h[self]) >>
                                                         /\ h' = [h EXCEPT ![self] = -1]
                                                         /\ pc' = [pc EXCEPT ![self] = "wt"]
                                                    ELSE /\ TRUE
                                                         /\ pc' = [pc EXCEPT ![self] = "wt"]
                                                         /\ UNCHANGED << disk, 
                                                                         history, 
                                                                         h >>
             /\ UNCHANGED << tail, head, result, t >>

casB(self) == /\ pc[self] = "casB"
              /\ IF tail = t[self]
                    THEN /\ tail' = fin
                         /\ result' = [result EXCEPT ![self] = TRUE]
                    ELSE /\ result' = [result EXCEPT ![self] = FALSE]
                         /\ tail' = tail
              /\ IF result'[self]
                    THEN /\ Assert(disk = <<>>, 
                                   "Failure of assertion at line 314, column 33.")
                         /\ pc' = [pc EXCEPT ![self] = "Done"]
                    ELSE /\ pc' = [pc EXCEPT ![self] = "wt"]
              /\ UNCHANGED << disk, head, history, t, h >>

rd(self) == /\ pc[self] = "rd"
            /\ Assert(t[self] \in Range(disk), 
                      "Failure of assertion at line 331, column 18.")
            /\ disk' = Remove(disk, t[self])
            /\ history' = history \o << Op(self, "deq", t[self]) >>
            /\ pc' = [pc EXCEPT ![self] = "exp"]
            /\ UNCHANGED << tail, head, result, t, h >>

exp(self) == /\ pc[self] = "exp"
             /\ IF TotalWork
                   THEN /\ pc' = [pc EXCEPT ![self] = "deq"]
                   ELSE /\ pc' = [pc EXCEPT ![self] = "enq"]
             /\ UNCHANGED << tail, disk, head, history, result, t, h >>

enq(self) == /\ pc[self] = "enq"
             /\ IF h[self] = -1
                   THEN /\ \/ /\ pc' = [pc EXCEPT ![self] = "violation"]
                           \/ /\ pc' = [pc EXCEPT ![self] = "claim"]
                   ELSE /\ IF h[self] # -1
                              THEN /\ \/ /\ pc' = [pc EXCEPT ![self] = "violation"]
                                      \/ /\ pc' = [pc EXCEPT ![self] = "wrt"]
                                      \/ /\ pc' = [pc EXCEPT ![self] = "deq"]
                              ELSE /\ pc' = [pc EXCEPT ![self] = "claim"]
             /\ UNCHANGED << tail, disk, head, history, result, t, h >>

claim(self) == /\ pc[self] = "claim"
               /\ Assert(h[self] = -1, 
                         "Failure of assertion at line 405, column 20.")
               /\ pc' = [pc EXCEPT ![self] = "clm1"]
               /\ UNCHANGED << tail, disk, head, history, result, t, h >>

clm1(self) == /\ pc[self] = "clm1"
              /\ h' = [h EXCEPT ![self] = head]
              /\ pc' = [pc EXCEPT ![self] = "clm2"]
              /\ UNCHANGED << tail, disk, head, history, result, t >>

clm2(self) == /\ pc[self] = "clm2"
              /\ IF head = h[self]
                    THEN /\ head' = h[self] + 1
                         /\ result' = [result EXCEPT ![self] = TRUE]
                    ELSE /\ result' = [result EXCEPT ![self] = FALSE]
                         /\ head' = head
              /\ IF result'[self]
                    THEN /\ h' = [h EXCEPT ![self] = h[self] + 1]
                         /\ \/ /\ pc' = [pc EXCEPT ![self] = "deq"]
                            \/ /\ pc' = [pc EXCEPT ![self] = "wrt"]
                    ELSE /\ pc' = [pc EXCEPT ![self] = "clm1"]
                         /\ h' = h
              /\ UNCHANGED << tail, disk, history, t >>

wrt(self) == /\ pc[self] = "wrt"
             /\ disk' = disk \o << h[self] >>
             /\ history' = history \o << Op(self, "enq", h[self]) >>
             /\ h' = [h EXCEPT ![self] = -1]
             /\ \/ /\ pc' = [pc EXCEPT ![self] = "deq"]
                \/ /\ pc' = [pc EXCEPT ![self] = "exp"]
             /\ UNCHANGED << tail, head, result, t >>

violation(self) == /\ pc[self] = "violation"
                   /\ IF tail = t[self]
                         THEN /\ tail' = vio
                              /\ result' = [result EXCEPT ![self] = TRUE]
                         ELSE /\ result' = [result EXCEPT ![self] = FALSE]
                              /\ tail' = tail
                   /\ IF result'[self]
                         THEN /\ pc' = [pc EXCEPT ![self] = "Done"]
                         ELSE /\ pc' = [pc EXCEPT ![self] = "retry"]
                   /\ UNCHANGED << disk, head, history, t, h >>

retry(self) == /\ pc[self] = "retry"
               /\ t' = [t EXCEPT ![self] = tail]
               /\ pc' = [pc EXCEPT ![self] = "violation"]
               /\ UNCHANGED << tail, disk, head, history, result, h >>

worker(self) == deq(self) \/ casA(self) \/ wt(self) \/ wt1(self)
                   \/ casB(self) \/ rd(self) \/ exp(self) \/ enq(self)
                   \/ claim(self) \/ clm1(self) \/ clm2(self) \/ wrt(self)
                   \/ violation(self) \/ retry(self)

(* Allow infinite stuttering to prevent deadlock on termination. *)
Terminating == /\ \A self \in ProcSet: pc[self] = "Done"
               /\ UNCHANGED vars

Next == (\E self \in Workers: worker(self))
           \/ Terminating

Spec == /\ Init /\ [][Next]_vars
        /\ \A self \in Workers : WF_vars(worker(self))

Termination == <>(\A self \in ProcSet: pc[self] = "Done")

\* END TRANSLATION TLA-037ee48c6dde150f2af59a00ca1b0745
-----------------------------------------------------------------------------

=============================================================================
